{"version":3,"sources":["components/Title.tsx","components/MenuBar.tsx","components/ArrayElementComponent.tsx","components/ArrayComponent.tsx","sortingAlgorithms.ts","index.tsx"],"names":["Title","className","RadioButton","name","value","checked","type","ArraySizeOptions","AnimationSpeedOptions","MenuBar","resetArray","sort","onClick","ArrayElementComponent","style","height","ArrayComponent","data","map","e","i","key","findMinIdx","array","start","end","minIdx","min","animations","length","curr","j","push","sortedArray","console","log","mergeSort","k","midIdx","Math","floor","leftArray","rightArray","App","useState","setArray","initialArray","Array","generateRandomNumber","fill","useEffect","sortingAlgorithm","a","sortingFunc","getSortingFunc","animate","sortingAlgorithms","arrayElements","from","document","getElementsByClassName","Promise","resolve","setTimeout","color","backgroundColor","max","random","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.49e572fd.chunk.js","sourcesContent":["import React from \"react\";\nconst Title = () => {\n    return (\n        <div className=\"title\">\n            <h1>Sorting Algorithm Visualiser</h1>\n        </div>\n    );\n};\n\nexport default Title;","import React from \"react\";\n\nconst RadioButton = ({name, value, checked} : {name : string, value : number, checked? : boolean}) => {\n    return (\n        <>\n            <label><input type=\"radio\" name={name} value={value} checked={checked}></input> {value}</label>\n\n        </>\n    );\n};\n\nconst ArraySizeOptions = () => {\n    return (\n        <div className=\"array-size-options\">\n            <label>\n                Array Size:\n                <RadioButton name=\"arraySize\" value={30} />\n                <RadioButton name=\"arraySize\" value={60} />\n                <RadioButton name=\"arraySize\" value={90} />\n            </label>\n\n        </div>\n    );\n};\n\nconst AnimationSpeedOptions = () => {\n    return (\n        <div className=\"animation-speed-options\">\n            <label>\n                Animation Speed:\n                <RadioButton name=\"animationSpeed\" value={100} />\n                <RadioButton name=\"animationSpeed\" value={50} />\n                <RadioButton name=\"animationSpeed\" value={20} />\n            </label>\n        </div>\n    );\n};\n\ninterface IMenuBarProps {\n    resetArray : () => void,\n    sort : (sortingAlgorithm : string) => Promise<void>\n}\nconst MenuBar = ({ resetArray, sort} : IMenuBarProps) => {\n    return (\n        <div className=\"menu-bar\">\n            <button onClick={resetArray}>Reset Array</button>\n            <button onClick={() => sort(\"selection\")}>Selection Sort</button>\n            <button onClick={() => sort(\"insertion\")}>Insertion Sort</button>\n            <button onClick={() => sort(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => sort(\"merge\")}>Merge Sort</button>\n            <button onClick={() => sort(\"heap\")}>Heap Sort</button>\n            <ArraySizeOptions />\n            <AnimationSpeedOptions />\n        </div>\n    );\n};\n\nexport default MenuBar;\n","import React from \"react\";\n\ninterface IArrayElementComponent {\n    value : number\n}\nconst ArrayElementComponent = ({ value } : IArrayElementComponent) => {\n    const style = {\n        height: value,\n    };\n    return (\n        <div className=\"array-element-component\" style={style}></div>\n    );\n};\n\nexport default ArrayElementComponent;","import ArrayElementComponent from \"./ArrayElementComponent\";\nimport React from \"react\";\n\ninterface IArrayComponentProps {\n    data : number[]\n}\n\nconst ArrayComponent = ({ data } : IArrayComponentProps) => {\n    return (\n        <div className=\"array-component\">\n            {data.map((e, i) =>  <ArrayElementComponent key={i} value={e} />)}\n        </div>\n    );\n};\n\nexport default ArrayComponent;","// TODO: set up tests that results are sorted\nconst selectionSort = (array : number[]) => {\n    console.log(array);\n    let animations : number[][] = [];\n    for (let i : number = 0; i < array.length; i++) {\n        let curr = array[i];\n        let minIdx = findMinIdx(array, i, array.length);\n        animations.push([i, minIdx, array[i], array[minIdx]]);\n        animations.push([i, minIdx, array[minIdx], array[i]]);\n\n        array[i] = array[minIdx];\n        array[minIdx] = curr;\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst findMinIdx = (array : number[], start : number, end : number) => {\n    // careful when 2 variables are tied together\n    let minIdx = start;\n    let min = array[start];\n    for (let i : number = start; i < end; i++) {\n        if (array[i] < min) {\n            minIdx = i;\n            min = array[i];\n        }\n    }\n    return minIdx;\n};\n\nconst insertionSort = (array : number[]) => {\n    let animations : number[][] = [];\n    for (let i : number = 1; i < array.length; i++) {\n        let curr : number = array[i];\n        let j : number = i - 1;\n        while (j >= 0 && array[j] > curr) {\n            animations.push([j, j+1, array[j], array[j+1]]);\n            animations.push([j, j+1, array[j], array[j]]);\n\n            array[j+1] = array[j];\n            j--;\n        }\n\n        animations.push([i, j+1, array[i], array[j+1]]);\n        animations.push([i, j+1, array[i], array[i]]);\n        array[j+1] = curr;\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst bubbleSort = (array : number[]) => {\n    let animations : number[][] = [];\n    // TODO: implement\n    return {animations: animations, sortedArray: array};\n};\n\n// TODO: rethink animation\nconst mergeSort = (array : number[]) => {\n    let animations : number[][] = [];\n    if (array.length >= 2) {\n        const midIdx = Math.floor(array.length / 2);\n        let leftArray : number[] = [];\n        let rightArray: number[] = [];\n        for (let i = 0; i < midIdx; i++) leftArray[i] = array[i];\n        for (let j = midIdx; j < array.length; j++) rightArray[j-midIdx] = array[j];\n        mergeSort(leftArray);\n        mergeSort(rightArray);\n        let i, j, k : number;\n        i = j = k = 0;\n        while (k < array.length) {\n            if (i >= leftArray.length) {\n                animations.push([k, j+midIdx, array[k], rightArray[j]]);\n                animations.push([k, j+midIdx, rightArray[j], rightArray[j]]);\n                array[k] = rightArray[j];\n                j++;\n            } else if (j >= rightArray.length) {\n                animations.push([k, i, array[k], leftArray[i]]);\n                animations.push([k, i, leftArray[i], leftArray[i]]);\n                array[k] = leftArray[i];\n                i++;\n            } else {\n                if (leftArray[i] < rightArray[j]) {\n                    animations.push([k, i, array[k], leftArray[i]]);\n                    animations.push([k, i, leftArray[i], leftArray[i]]);\n                    array[k] = leftArray[i];\n                    i++;\n                } else {\n                    animations.push([k, j+midIdx, array[k], rightArray[j]]);\n                    animations.push([k, j+midIdx, rightArray[j], rightArray[j]]);\n                    array[k] = rightArray[j];\n                    j++;\n                }\n            }\n            k++;\n        }\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst heapSort = (array : number[]) => {\n    let animations : number[][] = [];\n    // TODO: implement\n    return {animations: animations, sortedArray: array};\n};\n\nconst testSort = (array : number[]) => {\n    console.log(\"intial: \", array);\n    let animations : number[][] = [];\n    console.log(\"sorted: \", array);\n    return {animations: animations, sortedArray: array};\n};\n\nexport default { insertionSort, selectionSort, bubbleSort, mergeSort, heapSort, testSort };","import React, { useState, useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Title from \"./components/Title\";\nimport MenuBar from \"./components/MenuBar\";\nimport ArrayComponent from \"./components/ArrayComponent\";\nimport sortingAlgorithms from \"./sortingAlgorithms\";\n// import test from \"./tests\";\n\nconst App = () => {\n    // set up constants\n    const MIN_ARRAY_SIZE = 5;\n    const MAX_ARRAY_SIZE = 30;\n    const MIN_ARRAY_VAL = 0;\n    const MAX_ARRAY_VAL = 500;\n    const ANINMATION_SPEED = 200;\n\n    // set up array state hook\n    const [ array, setArray ] = useState<number[]>([]);\n\n    const resetArray = () : void => {\n        const initialArray = new Array(generateRandomNumber(MAX_ARRAY_SIZE, MIN_ARRAY_SIZE)).fill(0)\n            .map(() => generateRandomNumber(MAX_ARRAY_VAL, MIN_ARRAY_VAL));\n        setArray(initialArray);\n    };\n\n    // set initial array state\n    useEffect(resetArray, []);\n    // useEffect(test, []); // TODO: stub; uncomment to test\n\n    const sort = async (sortingAlgorithm : string) : Promise<void> =>  {\n        // TODO: error message\n        const sortingFunc = getSortingFunc(sortingAlgorithm);\n        if (sortingFunc) {\n            const {animations, sortedArray} = sortingFunc([...array]);\n            await animate(animations);\n            setArray(sortedArray);\n        }\n    };\n\n    const getSortingFunc =\n        (sortingAlgorithm : string) : (array : number[]) => { animations : number[][], sortedArray : number[] } => {\n            switch (sortingAlgorithm) {\n                case \"selection\":   return sortingAlgorithms.selectionSort;\n                case \"insertion\":   return sortingAlgorithms.insertionSort;\n                case \"bubble\":      return sortingAlgorithms.bubbleSort;\n                case \"merge\":       return sortingAlgorithms.mergeSort;\n                case \"heap\":        return sortingAlgorithms.heapSort;\n                default:            return sortingAlgorithms.selectionSort;\n            }\n        };\n\n    const animate = (animations : number[][]) => {\n        const arrayElements =\n            Array.from(document.getElementsByClassName(\"array-element-component\")) as unknown as HTMLCollectionOf<HTMLElement>;\n        return new Promise((resolve) => {\n            for (let i = 0; i < animations.length; i++) {\n                setTimeout(() => {\n                    const color = i % 2 ?  \"cadetblue\" : \"lightcoral\";\n                    arrayElements[animations[i][0]].style.backgroundColor = color;\n                    arrayElements[animations[i][1]].style.backgroundColor = color;\n                    arrayElements[animations[i][0]].style.height = `${animations[i][2]}px`;\n                    arrayElements[animations[i][1]].style.height = `${animations[i][3]}px`;\n                    if (i === animations.length - 1) resolve(\"animate\");\n                }, i * ANINMATION_SPEED);\n            }\n        });\n    };\n\n    const generateRandomNumber = (max : number, min : number) : number => {\n        return Math.floor(Math.random() * (max - min) + min);\n    };\n\n    return (\n        <div>\n            <Title />\n            <MenuBar resetArray={resetArray} sort={sort} />\n            <ArrayComponent data={array} />\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}