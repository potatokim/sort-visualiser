{"version":3,"sources":["components/Title.tsx","components/MenuBar.tsx","components/ArrayElementComponent.tsx","components/ArrayComponent.tsx","sortingAlgorithms.ts","index.tsx"],"names":["Title","className","RadioButton","name","value","checked","onChangeFnc","type","onChange","ArraySizeOptions","onChangeArraySize","AnimationSpeedOptions","onChangeAnimationSpeed","MenuBar","resetArray","sort","onClick","ArrayElementComponent","style","height","ArrayComponent","data","map","e","i","key","findMinIdx","array","start","end","minIdx","min","animations","length","curr","j","push","sortedArray","console","log","mergeSort","k","midIdx","Math","floor","leftArray","rightArray","App","useState","setArray","animationSpeed","setAnimationSpeed","maxArraySize","setMaxArraySize","initialArray","Array","generateRandomNumber","fill","useEffect","sortingAlgorithm","a","sortingFunc","getSortingFunc","animate","sortingAlgorithms","arrayElements","from","document","getElementsByClassName","Promise","resolve","setTimeout","color","backgroundColor","max","random","newMaxArraySize","newAnimationSpeed","textAlign","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.62766670.chunk.js","sourcesContent":["import React from \"react\";\nconst Title = () => {\n    return (\n        <div className=\"title\">\n            <h1>Sorting Algorithm Visualiser</h1>\n        </div>\n    );\n};\n\nexport default Title;","import React from \"react\";\n\nconst RadioButton =\n    ({name, value, checked, onChangeFnc} :\n         {name : string, value : number, checked? : boolean, onChangeFnc : (newValue : number) => void}) => {\n    return (\n        <>\n            <label><input\n                type=\"radio\"\n                name={name}\n                value={value}\n                checked={checked}\n                onChange={() => onChangeFnc(value)}></input> {value}</label>\n\n        </>\n    );\n};\n\nconst ArraySizeOptions = ({ onChangeArraySize } : {onChangeArraySize : (newArraySize : number) => void}) => {\n    return (\n        <div className=\"array-size-options\">\n            <label>\n                Max Array Size:\n                <RadioButton name=\"arraySize\" value={30} onChangeFnc={onChangeArraySize} />\n                <RadioButton name=\"arraySize\" value={60} onChangeFnc={onChangeArraySize} />\n                <RadioButton name=\"arraySize\" value={90} onChangeFnc={onChangeArraySize} />\n            </label>\n\n        </div>\n    );\n};\n\nconst AnimationSpeedOptions = ({ onChangeAnimationSpeed } : {onChangeAnimationSpeed : (newAnimationSpeed : number) => void}) => {\n    return (\n        <div className=\"animation-speed-options\">\n            <label>\n                Animation Speed:\n                <RadioButton name=\"animationSpeed\" value={0.5} onChangeFnc={onChangeAnimationSpeed} />\n                <RadioButton name=\"animationSpeed\" value={1} onChangeFnc={onChangeAnimationSpeed} />\n                <RadioButton name=\"animationSpeed\" value={2} onChangeFnc={onChangeAnimationSpeed} />\n            </label>\n        </div>\n    );\n};\n\ninterface IMenuBarProps {\n    resetArray : () => void,\n    sort : (sortingAlgorithm : string) => Promise<void>\n    onChangeArraySize : (newArraySize : number) => void;\n    onChangeAnimationSpeed : (newAnimationSpeed : number) => void;\n}\nconst MenuBar = ({ resetArray, sort, onChangeArraySize, onChangeAnimationSpeed} : IMenuBarProps) => {\n    return (\n        <div className=\"menu-bar\">\n            <button onClick={resetArray}>Reset Array</button>\n            <button onClick={() => sort(\"selection\")}>Selection Sort</button>\n            <button onClick={() => sort(\"insertion\")}>Insertion Sort</button>\n            <button onClick={() => sort(\"bubble\")}>Bubble Sort</button>\n            <button onClick={() => sort(\"merge\")}>Merge Sort</button>\n            <button onClick={() => sort(\"heap\")}>Heap Sort</button>\n            <ArraySizeOptions onChangeArraySize={onChangeArraySize} />\n            <AnimationSpeedOptions onChangeAnimationSpeed={onChangeAnimationSpeed} />\n        </div>\n    );\n};\n\nexport default MenuBar;\n","import React from \"react\";\n\ninterface IArrayElementComponent {\n    value : number\n}\nconst ArrayElementComponent = ({ value } : IArrayElementComponent) => {\n    const style = {\n        height: value,\n    };\n    return (\n        <div className=\"array-element-component\" style={style}></div>\n    );\n};\n\nexport default ArrayElementComponent;","import ArrayElementComponent from \"./ArrayElementComponent\";\nimport React from \"react\";\n\ninterface IArrayComponentProps {\n    data : number[]\n}\n\nconst ArrayComponent = ({ data } : IArrayComponentProps) => {\n    return (\n        <div className=\"array-component\">\n            {data.map((e, i) =>  <ArrayElementComponent key={i} value={e} />)}\n        </div>\n    );\n};\n\nexport default ArrayComponent;","// TODO: set up tests that results are sorted\nconst selectionSort = (array : number[]) => {\n    console.log(array);\n    let animations : number[][] = [];\n    for (let i : number = 0; i < array.length; i++) {\n        let curr = array[i];\n        let minIdx = findMinIdx(array, i, array.length);\n        // swapping animation:\n        // original:    i<-array[i] minIdx<-array[minIdx]\n        // swapped:     i<-array[minIdx] minIdx<-array[i]\n        animations.push([i, minIdx, array[i], array[minIdx]]);\n        animations.push([i, minIdx, array[minIdx], array[i]]);\n\n        array[i] = array[minIdx];\n        array[minIdx] = curr;\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst findMinIdx = (array : number[], start : number, end : number) => {\n    // careful when 2 variables are tied together\n    let minIdx = start;\n    let min = array[start];\n    for (let i : number = start; i < end; i++) {\n        if (array[i] < min) {\n            minIdx = i;\n            min = array[i];\n        }\n    }\n    return minIdx;\n};\n\nconst insertionSort = (array : number[]) => {\n    let animations : number[][] = [];\n    for (let i : number = 1; i < array.length; i++) {\n        let curr : number = array[i];\n        let j : number = i - 1;\n        while (j >= 0 && array[j] > curr) {\n            // shifting animation:\n            // original: j<-array[j], j+1<-array[j+1]\n            // shifted: j<-array[j], j+1<-array[j]\n            animations.push([j, j+1, array[j], array[j+1]]);\n            animations.push([j, j+1, array[j], array[j]]);\n\n            array[j+1] = array[j];\n            j--;\n        }\n\n        // overwriting animation:\n        // original: j+1<-array[j+1]\n        // overwritten: j+1<-array[i]\n        animations.push([j+1, array[j+1]]);\n        animations.push([j+1, curr]);\n        array[j+1] = curr;\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst bubbleSort = (array : number[]) => {\n    let animations : number[][] = [];\n    // TODO: implement\n    return {animations: animations, sortedArray: array};\n};\n\n// TODO: rethink animation\nconst mergeSort = (array : number[]) => {\n    let animations : number[][] = [];\n    if (array.length >= 2) {\n        const midIdx = Math.floor(array.length / 2);\n        let leftArray : number[] = [];\n        let rightArray: number[] = [];\n        for (let i = 0; i < midIdx; i++) leftArray[i] = array[i];\n        for (let j = midIdx; j < array.length; j++) rightArray[j-midIdx] = array[j];\n        mergeSort(leftArray);\n        mergeSort(rightArray);\n        let i, j, k : number;\n        i = j = k = 0;\n        // console.log(\"total: \", array);\n        // console.log(\"left: \", leftArray);\n        // console.log(\"right: \", rightArray);\n        while (k < array.length) {\n            animations.push([k, array[k]]);\n            if (i >= leftArray.length) {\n                // placement animation (from auxiliary arrays in original array):\n                // original: k->array[k]\n                // placed: k->rightArray[j]\n                animations.push([k, rightArray[j]]);\n                array[k] = rightArray[j];\n                j++;\n            } else if (j >= rightArray.length) {\n                animations.push([k, leftArray[i]]);\n                array[k] = leftArray[i];\n                i++;\n            } else {\n                if (leftArray[i] < rightArray[j]) {\n                    animations.push([k, leftArray[i]]);\n                    array[k] = leftArray[i];\n                    i++;\n                } else {\n                    animations.push([k, rightArray[j]]);\n                    array[k] = rightArray[j];\n                    j++;\n                }\n            }\n            k++;\n        }\n    }\n    return {animations: animations, sortedArray: array};\n};\n\nconst heapSort = (array : number[]) => {\n    let animations : number[][] = [];\n    // TODO: implement\n    return {animations: animations, sortedArray: array};\n};\n\nconst testSort = (array : number[]) => {\n    console.log(\"intial: \", array);\n    let animations : number[][] = [];\n    console.log(\"sorted: \", array);\n    return {animations: animations, sortedArray: array};\n};\n\nexport default { insertionSort, selectionSort, bubbleSort, mergeSort, heapSort, testSort };","import React, { useState, useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Title from \"./components/Title\";\nimport MenuBar from \"./components/MenuBar\";\nimport ArrayComponent from \"./components/ArrayComponent\";\nimport sortingAlgorithms from \"./sortingAlgorithms\";\n// import test from \"./tests\";\n\nconst App = () => {\n    // set up constants\n    const MIN_ARRAY_SIZE = 5;\n    const MAX_ARRAY_SIZE = 30;\n    const MIN_ARRAY_VAL = 0;\n    const MAX_ARRAY_VAL = 470;\n    const ANINMATION_SPEED = 200;\n\n    // set up array state hook\n    const [ array, setArray ] = useState<number[]>([]);\n    const [ animationSpeed, setAnimationSpeed ] = useState<number>(ANINMATION_SPEED);\n    const [ maxArraySize, setMaxArraySize ] = useState<number>(MAX_ARRAY_SIZE);\n\n    const resetArray = () : void => {\n        const initialArray = new Array(generateRandomNumber(maxArraySize, MIN_ARRAY_SIZE)).fill(0)\n            .map(() => generateRandomNumber(MAX_ARRAY_VAL, MIN_ARRAY_VAL));\n        console.log(initialArray); // for testing recursive func\n        setArray(initialArray);\n    };\n\n    // set initial array state\n    useEffect(resetArray, []);\n    // useEffect(test, []); // uncomment to test\n\n    const handleChangeArraySize = (newMaxArraySize : number) => {\n        setMaxArraySize(newMaxArraySize);\n    };\n\n    const handleChangeAnimationSpeed = (newAnimationSpeed : number) => {\n        setAnimationSpeed(newAnimationSpeed);\n    };\n\n    const sort = async (sortingAlgorithm : string) : Promise<void> =>  {\n        // TODO: error message\n        const sortingFunc = getSortingFunc(sortingAlgorithm);\n        if (sortingFunc) {\n            const {animations, sortedArray} = sortingFunc([...array]);\n            await animate(animations);\n            setArray(sortedArray);\n        }\n    };\n\n    const getSortingFunc =\n        (sortingAlgorithm : string) : (array : number[]) => { animations : number[][], sortedArray : number[] } => {\n            switch (sortingAlgorithm) {\n                case \"selection\":   return sortingAlgorithms.selectionSort;\n                case \"insertion\":   return sortingAlgorithms.insertionSort;\n                case \"bubble\":      return sortingAlgorithms.bubbleSort;\n                case \"merge\":       return sortingAlgorithms.mergeSort;\n                case \"heap\":        return sortingAlgorithms.heapSort;\n                default:            return sortingAlgorithms.selectionSort;\n            }\n        };\n\n    const animate = (animations : number[][]) => {\n        const arrayElements =\n            Array.from(document.getElementsByClassName(\"array-element-component\")) as unknown as HTMLCollectionOf<HTMLElement>;\n        return new Promise((resolve) => {\n            for (let i = 0; i < animations.length; i++) {\n                // animation = [changing indices and values, changed indices, changing indices, changed indices, ...]\n                setTimeout(() => {\n                    const color = i % 2 ?  \"cadetblue\" : \"lightcoral\";\n                    // TODO: change to pair<int, int> ie. pair<index, value> data type\n                    if (animations[i].length > 2) {\n                        console.log(animations[i]);\n                        arrayElements[animations[i][0]].style.backgroundColor = color;\n                        arrayElements[animations[i][0]].style.height = `${animations[i][2]}px`;\n                        arrayElements[animations[i][1]].style.backgroundColor = color;\n                        arrayElements[animations[i][1]].style.height = `${animations[i][3]}px`;\n                    } else {\n                        arrayElements[animations[i][0]].style.backgroundColor = color;\n                        arrayElements[animations[i][0]].style.height = `${animations[i][1]}px`;\n                    }\n                    if (i === animations.length - 1) resolve(\"animate\");\n                }, i * ANINMATION_SPEED / animationSpeed);\n            }\n        });\n    };\n\n    const generateRandomNumber = (max : number, min : number) : number => {\n        return Math.floor(Math.random() * (max - min) + min);\n    };\n\n    return (\n        <div>\n            <Title />\n            <MenuBar\n                resetArray={resetArray}\n                sort={sort}\n                onChangeArraySize={handleChangeArraySize}\n                onChangeAnimationSpeed={handleChangeAnimationSpeed}\n            />\n            <ArrayComponent data={array} />\n            <p style={{color: \"darkgray\", textAlign: \"right\"}}>\n                Animation for Selection and Insertion Sort are ready. Others are work in progress.\n            </p>\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}